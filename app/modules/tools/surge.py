from __future__ import annotations

import re
from subprocess import PIPE
from subprocess import Popen
from typing import Union


def get_heavy_atom_count(formula: str) -> int:
    """Calculate the heavy atom count from a given molecular formula.

    Args:
        formula (str): The molecular formula of the molecule.

    Returns:
        count (int): The number of heavy atoms in the molecule.
    """

    elements = re.findall(r"[A-Z][a-z]*\d*", formula)
    heavy_atom_count = 0

    for element in elements:
        element_name = re.findall(r"[A-Z][a-z]*", element)[0]
        element_count = re.findall(r"\d+", element)

        if len(element_count) == 0:
            atom_count = 1
        else:
            atom_count = int(element_count[0])

        if element_name != "H":
            heavy_atom_count += atom_count

    return heavy_atom_count


def get_surge_count(molecular_formula: str) -> int:
    """Get the number of structures generated by the surge tool.
    Args:
        molecular_formula (str): Molecular formula provided by the user.
    Returns:
        int: The number of structures generated by the surge tool.
    """

    if get_heavy_atom_count(molecular_formula) <= 10:
        try:
            process = Popen(
                ["surge", "-u", molecular_formula], stdout=PIPE, stderr=PIPE
            )
            stdout, stderr = process.communicate()

            stdout_text = stdout.decode("utf-8").strip()
            stderr_text = stderr.decode("utf-8").strip()

            # Surge outputs to stderr, so check both stdout and stderr
            output = stdout_text if stdout_text else stderr_text

            if not output:
                raise Exception(
                    f"No output from surge command. Return code: {process.returncode}"
                )

            # Parse the output to find the line with structure count
            # Pattern: ">Z generated X -> Y -> Z in N.NN sec"
            pattern = r">Z generated \d+ -> \d+ -> (\d+) in [\d\.]+ sec"
            match = re.search(pattern, output)

            if match:
                structure_count = int(match.group(1))
                return structure_count
            else:
                raise Exception(
                    f"Could not parse structure count from surge output. Output was: '{output}'"
                )

        except Exception as e:
            raise Exception(f"Error running surge: {str(e)}")
    else:
        raise Exception(
            f"Molecular formula {molecular_formula} has more than 10 heavy atoms"
        )


def generate_structures_SURGE(molecular_formula: str) -> Union[dict, str]:
    """Generate chemical structures using the surge tool based on the canonical.

    generation path method.

    Args:
        molecular_formula (str): Molecular formula provided by the user.

    Returns:
        dict: Dictionary containing:
            - total_count: Total number of possible structures
            - generated_count: Number of structures actually generated
            - structures: List of SMILES strings (limited to 1000)
            - settings: Dictionary describing the surge settings used
            - formula: The input molecular formula
            - limit_applied: Whether a limit was applied to results
        str: Error message if molecular formula contains more than 10 heavy atoms.
    """

    if get_heavy_atom_count(molecular_formula) > 10:
        return "The molecular formula contains more heavy atoms than allowed (10 Heavy Atoms max)."

    # Surge command settings
    surge_args = [
        "-P",  # Require planarity
        "-T",  # Disallow triple bonds
        "-B1,2,3,4,5,7,9",  # Avoid various substructures
        "-t0",  # Limit rings of length 3
        "-f0",  # Limit cycles of length 4
    ]

    settings_description = {
        "-P": "Require planarity",
        "-T": "Disallow triple bonds",
        "-B1,2,3,4,5,7,9": "Avoid substructures: no triple bonds in small rings, Bredt's rule violations, cumulative double bonds, forbidden topologies",
        "-t0": "No rings of length 3 allowed",
        "-f0": "No cycles of length 4 allowed",
        "-S": "Output in SMILES format",
    }

    try:
        # First, get the total count
        total_count = get_surge_count(molecular_formula)

        # Then generate structures (limited to first 1000)
        process = Popen(
            ["surge"] + surge_args + ["-S", molecular_formula],
            stdout=PIPE,
            stderr=PIPE,
        )
        stdout, stderr = process.communicate()

        if process.returncode == 0:
            output_lines = stdout.decode("utf-8").splitlines()
            smiles = [line.strip() for line in output_lines if line.strip()]

            # Limit to first 1000 structures
            limited_smiles = smiles[:1000]

            return {
                "total_count": total_count,
                "generated_count": len(limited_smiles),
                "structures": limited_smiles,
                "settings": settings_description,
                "formula": molecular_formula,
                "limit_applied": len(smiles) > 1000,
            }
        else:
            raise Exception(f"Error running surge: {stderr.decode('utf-8')}")
    except Exception as e:
        raise Exception(f"Error running surge: {str(e)}")

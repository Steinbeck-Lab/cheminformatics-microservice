name : Prod Build, Test and Publish

on:
  release:
    types: [published]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: europe-west3-a
  REPOSITORY_NAME: cheminformatics-python-microservice
  APP_IMAGE: chem-py-microservice

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip3 install --upgrade setuptools pip
        pip3 install --no-cache-dir -r requirements.txt
        python3 -m pip uninstall -y imantics
        pip3 install imantics==0.1.12
        pip3 install --no-deps decimer-segmentation
        pip3 install --no-deps decimer>=2.2.0
        pip3 install --no-deps STOUT-pypi>=2.0.5
        pip install flake8 pytest
    - name: Analysing the code with pylint
      run: |
        flake8 --ignore E501,W503 $(git ls-files '*.py')
    - name: Run test
      run: |
        pytest -p no:warnings

  setup-build-publish-prod:
    name: Build & publish to prod registry
    # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - name: Setup CLI
      uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - name: Configure docker
      run: |-
        gcloud auth configure-docker europe-west3-docker.pkg.dev

    #Fetch latest release
    - name: Fetch latest release
      id: fetch-latest-release
      uses: InsonusK/get-latest-release@v1.0.1
      with:
        myToken: ${{ github.token }}
        exclude_types: "draft"
        view_top: 10
    - name: "Print release name"
      run: |
        echo "tag_name: ${{ steps.fetch-latest-release.outputs.tag_name }}"

    # Build the Docker image
    - name: Build docker image
      run: |-
        docker build --build-arg RELEASE_VERSION=${{ steps.fetch-latest-release.outputs.tag_name }}  --tag "europe-west3-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$APP_IMAGE:latest" .
          .
    # Push the Docker image to Google Container Registry
    - name: Publish image to Google Artifact Registry
      run: |-
        docker push "europe-west3-docker.pkg.dev/$PROJECT_ID/$REPOSITORY_NAME/$APP_IMAGE:latest"
services:
  traefik:
    image: traefik:v3.1.5
    container_name: traefik-prod
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - cm_network_prod

  api: # Backend service
    # build:
    #   context: ./../ # Assuming this is the root of your project
    #   dockerfile: ./Dockerfile.lite # Or your main Dockerfile if lite isn't intended for this
    image: nfdi4chem/cheminformatics-microservice:latest
    environment:
      HOMEPAGE_URL: "/latest/docs" # App serves docs at /latest/docs
      RELEASE_VERSION: v2.6.0 # Or dynamically set from release tag
    # pull_policy: always # Use if pulling pre-built images
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`api.naturalproducts.net`) || Host(`app.naturalproducts.net`) && PathPrefix(`/latest`)"
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=80" # Internal port of the API container
      # No stripprefix middleware needed if the app expects /latest
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/latest/chem/health"] # Internal health check, app expects /latest
      interval: 1m
      timeout: 10s
      retries: 10
      start_period: 40s
    restart: unless-stopped
    networks:
      - cm_network_prod

  web: # Frontend service
    # build:
    #   context: ./../frontend
    #   dockerfile: ./Dockerfile
    #   args:
    #     REACT_APP_API_URL: "http://localhost:80/latest"
    image: nfdi4chem/cheminformatics-microservice:app
    # pull_policy: always # Use if pulling pre-built images
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`app.naturalproducts.net`) || Host(`api.naturalproducts.net`)" # Catches all other traffic
      - "traefik.http.routers.web.entrypoints=web"
      - "traefik.http.services.web.loadbalancer.server.port=80" # Internal port of the frontend container
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 1m
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - cm_network_prod

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9091:9090"
    volumes:
      - ./../prometheus_data/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus # Changed to named volume for prod
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - cm_network_prod

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    user: "472"
    ports:
      - "3002:3000"
    volumes:
      - grafana_data_prod:/var/lib/grafana # Changed to named volume for prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - cm_network_prod

volumes:
  prometheus_data_prod: # Renamed volume for prod context
    driver: local
  grafana_data_prod: # Renamed volume for prod context
    driver: local

networks:
  cm_network_prod:
    name: cm_network_prod
    driver: bridge
